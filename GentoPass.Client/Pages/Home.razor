@page "/"
@rendermode InteractiveWebAssembly
@inject HttpClient Http
@inject IJSRuntime JS

<div class="container">
    <h3>Generador de Contraseñas</h3>
    <label>Longitud de la contraseña:</label>
    <InputNumber @bind-Value="passwordLength" Min="5" Max="100" />

    <div>
        <label><InputCheckbox @bind-Value="includeUppercase" /> Mayúsculas</label>
        <label><InputCheckbox @bind-Value="includeLowercase" /> Minúsculas</label>
        <label><InputCheckbox @bind-Value="includeNumbers" /> Números</label>
        <label><InputCheckbox @bind-Value="includeSymbols" /> Símbolos</label>
    </div>

    <button @onclick="GeneratePassword">Generar Contraseña</button>

    @if (!string.IsNullOrEmpty(generatedPassword))
    {
        <div>
            <p>Contraseña generada: @generatedPassword</p>
            <button @onclick="CopyToClipboard">Copiar Contraseña</button>
            <button @onclick="SavePassword">Guardar Contraseña</button>
        </div>
    }

    <div style="display: flex; justify-content: space-between;">
        <div style="flex: 1; margin-right: 20px;">
        </div>

        <div class="saved-passwords">
            @if (savedPasswords.Count > 0)
            {
                <h4>Contraseñas guardadas:</h4>
                <ul>
                    @foreach (var password in savedPasswords)
                    {
                        <li>@password</li>
                        <button @onclick="@((e) => CopyToClipboardSaved(password))">Copiar</button>
                    }
                </ul>
            }
        </div>
    </div>
</div>

@code {
    private int passwordLength = 15;
    private bool includeUppercase = true;
    private bool includeLowercase = true;
    private bool includeNumbers = false;
    private bool includeSymbols = false;
    private string generatedPassword;
    private List<string> savedPasswords = new List<string>();

    private async Task GeneratePassword()
    {
        var response = await Http.GetStringAsync($"api/password/generate?length={passwordLength}&includeUppercase={includeUppercase}&includeLowercase={includeLowercase}&includeNumbers={includeNumbers}&includeSymbols={includeSymbols}");
        generatedPassword = response;
    }

    private async Task CopyToClipboard()
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", generatedPassword);
    }

    private async Task CopyToClipboardSaved(string savedPasword)
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", savedPasword);
    }

    private void SavePassword()
    {
        if (!string.IsNullOrEmpty(generatedPassword))
        {
            savedPasswords.Add(generatedPassword);
            generatedPassword = string.Empty;
        }
    }
}
